nodesIdSelection = TRUE) %>%
visEdges(arrows = list(to = list(enabled = T,
scaleFactor = 0.75)))
} else if (ui == "3"){
# betweenness centrality
between.centrality <- betweenness(igraph.Object)
nodes <- nodes <- data.frame(nodes,
value = between.centrality,
group = between.centrality)
graph <- visNetwork(nodes = nodes,
edges = edges,
main = "Betweenness Centrality") %>%
visPhysics(solver = "repulsion")%>%
visInteraction(navigationButtons = TRUE) %>%
visOptions(selectedBy = "value",
highlightNearest = TRUE,
nodesIdSelection = TRUE) %>%
visEdges(arrows = list(to = list(enabled = T,
scaleFactor = 0.75)))
} else if(ui == "4"){
# closeness centrality
closeness.centrality <- closeness(igraph.Object,
mode = c("all"))
nodes <- data.frame(nodes,
value = closeness.centrality,
group = closeness.centrality)
graph <- visNetwork(nodes = nodes,
edges = edges,
main = "Closeness Centrality") %>%
visPhysics(solver = "repulsion")%>%
visInteraction(navigationButtons = TRUE) %>%
visOptions(selectedBy = "value",
highlightNearest = TRUE,
nodesIdSelection = TRUE)%>%
visEdges(arrows = list(to = list(enabled = T,
scaleFactor = 0.75)))
} else if (ui == "5"){
# all indegree/outdegree = degree centrality
all.degree <- centr_degree(igraph.Object,
mode = c("all"))
nodes <- data.frame(nodes,
value = all.degree$res,
group = all.degree$res)
graph <- visNetwork(nodes = nodes,
edges = edges,
main = "Degree Centrality") %>%
visPhysics(solver = "repulsion")%>%
visInteraction(navigationButtons = TRUE) %>%
visOptions(selectedBy = "value",
highlightNearest = TRUE,
nodesIdSelection = TRUE) %>%
visEdges(arrows = list(to = list(enabled = T,
scaleFactor = 0.75)))
} else if (ui == "6"){
#S ource Hub Ratio
outdegree <- centr_degree(igraph.Object,
mode = c("out")) #Calculates the Outdegree = Source of shifts of metadata state for all nodes
all.degree <- centr_degree(igraph.Object,
mode = c("all")) #Calculates the Degree = Hub, in and out of shifts of metadata state
sourcehubratio <- outdegree$res/all.degree$res # This is the basic "Source Hub Ratio", still have to work on the normalizing formula
nodes <- data.frame(nodes,
value = sourcehubratio,
group = sourcehubratio)
graph <- visNetwork(nodes = nodes,
edges = edges,
main = "Source Hub Ratio: Dead-end ~0 / Hub = .5 / Source = ~1") %>%
visPhysics(solver = "repulsion")%>%
visInteraction(navigationButtons = TRUE) %>%
visOptions(selectedBy = "value",
highlightNearest = TRUE,
nodesIdSelection = TRUE) %>%
visEdges(arrows = list(to = list(enabled = T,
scaleFactor = 0.75)))
}
} else {
cat("ERROR: Please enter an integer between 1 and 6 to select a centrality metric.")
}
graph
## Parsimonsious Example
graph <- makeTransNet(treeFileName = "../data/chikv_westernafrica.phy",
csvFileName = "../data/chikv_westernafrica_metadata.csv"
columnSelection = "Host",
centralityMetric = 6,
treeType = "parsimonious")
## Parsimonsious Example
graph <- makeTransNet(treeFileName = "../data/chikv_westernafrica.phy",
csvFileName = "../data/chikv_westernafrica_metadata.csv",
columnSelection = "Host",
centralityMetric = 6,
treeType = "parsimonious")
print(graph)
source("strainhub_functions.R")
## Baysian Example
graph <- makeTransNet(treeFileName = "../data/batRABV.mcc.tree",
columnSelection = "state",
centralityMetric = 6,
threshold = 0.9,
treeType = "bayesian")
print(graph)
## extract rates from annotations
## state.rates <- unlist(sapply(ladderized$annotations, function(e) e$state.rate_median))
## host.rates <- unlist(sapply(ladderized$annotations, function(e) e$host.rate_median))
# state <- unlist(sapply(ladderized$annotations, function(e) e$state))
# stateprob <- unlist(sapply(ladderized$annotations, function(e) e$state.prob))
state <- unlist(sapply(ladderized$annotations, function(e) e[[columnSelection]]))
columnSelection.prob <- paste0(columnSelection, ".prob") ## Get probability version of the state
stateprob <- unlist(sapply(ladderized$annotations, function(e) e[[columnSelection.prob]]))
## Tree edges - relationship between nodes
tree.edges = ladderized$edge
tree.edges
tree.edges2 = as_tibble(tree.edges)
state_tib = tibble(
State = state
) %>%
mutate(ind = 1:nrow(.))
state_tib
stateprob_tib = tibble(
Stateprob = stateprob
) %>%
mutate(ind = 1:nrow(.))
stateprob_tib
Edge_tib = left_join(tree.edges2, state_tib, by = c("V1" = "ind")) %>%
left_join(state_tib, by = c("V2" = "ind"), suffix = c("_org", "_dst")) %>%
left_join(stateprob_tib, by =c("V1" = "ind")) %>%
left_join(stateprob_tib, by =c("V2" = "ind"), suffix = c("_org", "_dst")) %>%
select(Stateprob_org, State_org, State_dst, Stateprob_dst)
Edge_tib
Edge_notdup_threshold = Edge_tib %>%
filter(State_org != State_dst) %>%
filter(Stateprob_org >= threshold) %>% #Probability of node of origin being on that state
filter(Stateprob_dst >= threshold) #Probability of node of destiny being on that state
Edge_filtered = Edge_notdup_threshold %>%
select(State_org,State_dst)
dat <- data.frame(from = Edge_filtered$State_org,
to = Edge_filtered$State_dst)
Edge_filtered
dat
characterlabels <- as.character(unique(state)) ## extract unique labels from state column
edges <- plyr::count(dat)
names(edges)[names(edges) == "freq"] <- "value"
metastates <- characterlabels
nodes <- data.frame(id = 1:length(metastates), label = metastates) ##, fixed = list(x = T, y = T))
nodes = as_tibble(nodes)
edges = as_tibble(edges)
edges
Edges_tib = left_join(edges, nodes, by = c("from" = "label")) %>%
left_join(nodes, by = c("to" = "label"), suffix = c("_org", "_dst")) %>%
select(id_org, id_dst, value)
names(Edges_tib) <- c("from", "to", "value")
Edges_tib
igraph.Object <- graph.data.frame(Edges_tib,
directed = T,
vertices = nodes)
outdegree <- centr_degree(igraph.Object, mode = c("out")) #Calculates the Outdegree = Source of shifts of metadata state for all nodes
all.degree <- centr_degree(igraph.Object, mode = c("all")) #Calculates the Degree = Hub, in and out of shifts of metadata state
sourcehubratio <- outdegree$res/all.degree$res #This is the basic "Source Hub Ratio", still have to work on the normalizing formula
nodes <- data.frame(nodes, value = sourcehubratio, group = sourcehubratio)
graph <- visNetwork(nodes = nodes, edges = Edges_tib, main = "Source Hub Ratio: Dead-end ~0 / Hub = .5 / Source = ~1",height = "768px", width = "1024")%>%
visPhysics(solver = "repulsion")%>%
visInteraction(navigationButtons = TRUE)%>%
visOptions(selectedBy = "value", highlightNearest = TRUE,
nodesIdSelection = TRUE)%>%
visEdges(arrows = list(to = list(enabled = T, scaleFactor = 0.75)))
graph
edges = left_join(edges, nodes, by = c("from" = "label")) %>%
left_join(nodes, by = c("to" = "label"), suffix = c("_org", "_dst")) %>%
select(id_org, id_dst, value)
names(edges) <- c("from", "to", "value")
igraph.Object <- graph.data.frame(edges,
directed = T,
vertices = nodes)
#S ource Hub Ratio
outdegree <- centr_degree(igraph.Object,
mode = c("out")) #Calculates the Outdegree = Source of shifts of metadata state for all nodes
all.degree <- centr_degree(igraph.Object,
mode = c("all")) #Calculates the Degree = Hub, in and out of shifts of metadata state
sourcehubratio <- outdegree$res/all.degree$res # This is the basic "Source Hub Ratio", still have to work on the normalizing formula
nodes <- data.frame(nodes,
value = sourcehubratio,
group = sourcehubratio)
graph <- visNetwork(nodes = nodes,
edges = edges,
main = "Source Hub Ratio: Dead-end ~0 / Hub = .5 / Source = ~1") %>%
visPhysics(solver = "repulsion")%>%
visInteraction(navigationButtons = TRUE) %>%
visOptions(selectedBy = "value",
highlightNearest = TRUE,
nodesIdSelection = TRUE) %>%
visEdges(arrows = list(to = list(enabled = T,
scaleFactor = 0.75)))
graph
source("strainhub_functions.R")
source("strainhub_functions.R")
## Baysian Example
graph <- makeTransNet(treeFileName = "../data/batRABV.mcc.tree",
columnSelection = "state",
centralityMetric = 6,
threshold = 0.9,
treeType = "bayesian")
print(graph)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
## read annotated tree from Nexus file
tree <- read.annotated.nexus('../data/batRABV.mcc.tree')
## ladderize the tree
ladderized <- ladderize(tree)
## this tree has annotations##
names(ladderized)
class(ladderized$annotations)
length(ladderized$annotations)
## for each edge (each edge is identified by a terminal node), we have:
ladderized$annotations[[1]]
names(ladderized$annotations[[1]])
## for each edge (each edge is identified by a terminal node), we have:
columns <- names(ladderized$annotations[[1]]) %>% order()
## for each edge (each edge is identified by a terminal node), we have:
columns <- names(ladderized$annotations[[1]])
## for each edge (each edge is identified by a terminal node), we have:
columns <- names(ladderized$annotations[[1]]) %>% order_by()
## for each edge (each edge is identified by a terminal node), we have:
columns <- names(ladderized$annotations[[1]]) %>% order(1)
## for each edge (each edge is identified by a terminal node), we have:
columns <- names(ladderized$annotations[[1]]) %>% order()
## for each edge (each edge is identified by a terminal node), we have:
listofcolumns <- data.frame(`Column` = columnnames(ladderized$annotations[[1]]))
## for each edge (each edge is identified by a terminal node), we have:
listofcolumns <- data.frame(`Column` = names(ladderized$annotations[[1]]))
View(listofcolumns)
listofcolumn <- listofcolumns %>% filter(stringr::str_detect(Column, "_95%_HPD"))
View(listofcolumn)
## for each edge (each edge is identified by a terminal node), we have:
listofcolumns <- data.frame(`Column` = names(ladderized$annotations[[1]]))
listofcolumn <- listofcolumns %>% filter(!stringr::str_detect(Column, "_95%_HPD"))
View(listofcolumn)
## for each edge (each edge is identified by a terminal node), we have:
listofcolumns <- data.frame(`Column` = names(ladderized$annotations[[1]]))
## for each edge (each edge is identified by a terminal node), we have:
listofcolumns <- data.frame(`Column` = names(ladderized$annotations[[1]]))
listofcolumns <- listofcolumns %>% filter(!stringr::str_detect(Column, "_95%_HPD|_median|_range"))
View(listofcolumn)
View(listofcolumns)
## for each edge (each edge is identified by a terminal node), we have:
listofcolumns <- data.frame(`Column` = names(ladderized$annotations[[1]]))
listofcolumns <- listofcolumns %>% filter(!stringr::str_detect(Column, "_95%_HPD|_median|_range|.prob|.set"))
View(listofcolumns)
## for each edge (each edge is identified by a terminal node), we have:
listofcolumns <- data.frame(`Column` = names(ladderized$annotations[[1]]))
listofcolumns <- listofcolumns %>% filter(!stringr::str_detect(Column, "_95%_HPD|_median|_range|.prob|.set|.rate"))
View(listofcolumns)
listofcolumns$`Index` <- 1:nrow(listofcolumns)
View(listofcolumns)
runApp()
runApp()
## Parsimonsious Example
graph <- makeTransNet(treeFileName = "../data/chikv_westernafrica.phy",
csvFileName = "../data/chikv_westernafrica_metadata.csv",
columnSelection = "Host",
centralityMetric = 6,
treeType = "parsimonious")
## Baysian Example
listStates(treeFileName = "../data/batRABV.mcc.tree",
treeType = "bayesian")
source("strainhub_functions.R")
## Baysian Example
listStates(treeFileName = "../data/batRABV.mcc.tree",
treeType = "bayesian")
runApp()
## Parsimonsious Example
listStates(treeFileName = "../data/chikv_westernafrica.phy",
csvFileName = "../data/chikv_westernafrica_metadata.csv",
treeType = "parsimonious")
## Baysian Example
listStates(treeFileName = "../data/batRABV.mcc.tree",
treeType = "bayesian")
runApp()
runApp()
runApp()
treepreview <- ape::read.tree("../data/batRABV.mcc.tree")
treepreview <- OutbreakTools::read.annotated.nexus("../data/batRABV.mcc.tree")
t1 <- ggtree(treepreview, ladderize = F) %<+%
geom_point(aes_string(color = colorby, size = 3)) +
geom_text(aes(label = label),
hjust = 0,
position = position_nudge(x = 0.2)) +
scale_fill_brewer(palette="Spectral") +
scale_x_continuous(expand = c(.1, .1))
t1 <- ggtree(treepreview, ladderize = T)
t1
colorby <- "state"
t1 <- ggtree(treepreview, ladderize = T) %<+%
geom_point(aes_string(color = colorby, size = 3)) +
geom_text(aes(label = label),
hjust = 0,
position = position_nudge(x = 0.2)) +
scale_fill_brewer(palette="Spectral") +
scale_x_continuous(expand = c(.1, .1))
t1 <- ggtree(treepreview, ladderize = T) %<+%
geom_point(aes_string(color = colorby, size = 3))
t1 <- ggtree(treepreview, ladderize = T) +
geom_point(aes_string(color = colorby, size = 3))
t1 <- ggtree(treepreview, ladderize = T) +
geom_point(aes_string(color = colorby, size = 3)) +
geom_text(aes(label = label),
hjust = 0,
position = position_nudge(x = 0.2)) +
scale_fill_brewer(palette="Spectral") +
scale_x_continuous(expand = c(.1, .1))
plotly::ggplotly(t1)
t1 <- ggtree(treepreview, ladderize = F)
plotly::ggplotly(t1)
View(treepreview)
colorby <- root.annotation[["state"]]
colorby <- treepreview$root.annotation[["state"]]
View(treepreview)
treepreview <- OutbreakTools::read.annotated.nexus("../data/batRABV.mcc.tree")
t1 <- ggtree(treepreview, ladderize = F) +
geom_point(aes_string(size = 3)) +
geom_text(aes(label = tip.label),
hjust = 0,
position = position_nudge(x = 0.2)) +
scale_fill_brewer(palette="Spectral") +
scale_x_continuous(expand = c(.1, .1))
plotly::ggplotly(t1)
t1 <- ggtree(treepreview, ladderize = F) +
geom_point(aes_string(size = 3)) +
geom_text(aes(label = treepreview$tip.label),
hjust = 0,
position = position_nudge(x = 0.2)) +
scale_fill_brewer(palette="Spectral") +
scale_x_continuous(expand = c(.1, .1))
plotly::ggplotly(t1)
t1 <- ggtree(treepreview, ladderize = F) +
geom_point(aes_string(size = 3)) +
geom_text(aes(label = label),
hjust = 0,
position = position_nudge(x = 0.2)) +
scale_fill_brewer(palette="Spectral") +
scale_x_continuous(expand = c(.1, .1))
plotly::ggplotly(t1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderPlot
?renderVisNetwork
runApp()
rsconnect::setAccountInfo(name='colbyford', token='324E96B5C29C12415746640C89856527', secret='m6yGX8HHBHTHJcqDJcPjqBPRFVsighQiLDwQxTx3')
rsconnect::deployApp()
shiny::runApp()
shiny::runApp()
rsconnect::setAccountInfo(name='colbyford', token='324E96B5C29C12415746640C89856527', secret='m6yGX8HHBHTHJcqDJcPjqBPRFVsighQiLDwQxTx3')
rsconnect::deployApp()
install.packages(c("ade4", "adegenet"))
shiny::runApp()
devtools::install_github("thibautjombart/OutbreakTools")
install.packages("openssl")
devtools::install_github("thibautjombart/OutbreakTools")
devtools::install_github("thibautjombart/OutbreakTools")
devtools::install_github("thibautjombart/OutbreakTools")
devtools::install_github("thibautjombart/OutbreakTools")
install.packages("ape")
devtools::install_github("thibautjombart/OutbreakTools")
devtools::install_github("thibautjombart/OutbreakTools")
treepreview <- OutbreakTools::read.annotated.nexus("../data/batRABV.mcc.tree")
colorby <- "host"
annotationdf <- lapply(treepreview$annotations, data.frame, stringsAsFactors = FALSE) %>%
dplyr::bind_rows() %>%
dplyr::select_(colorby) %>%
slice(1:length(treepreview$tip.label)) %>%
as_tibble()
annotationdf$tip.label <- treepreview$tip.label
library(dplyr)
annotationdf <- lapply(treepreview$annotations, data.frame, stringsAsFactors = FALSE) %>%
dplyr::bind_rows() %>%
dplyr::select_(colorby) %>%
slice(1:length(treepreview$tip.label)) %>%
as_tibble()
annotationdf$tip.label <- treepreview$tip.label
t1 <- ggtree(treepreview, ladderize = T) %<+% annotationdf +
geom_point(aes_string(color = colorby, size = 3)) +
geom_text(aes(label = label),
hjust = 0,
position = position_nudge(x = 0.5)) +
ggtitle(paste0("Phylogeny of "),
subtitle = "Generated by StrainHub") +
scale_fill_brewer(palette="Spectral") +
scale_x_continuous(expand = c(.1, .1))
shiny::runApp()
t1 <- ggtree(treepreview, ladderize = T) %<+% annotationdf +
geom_point(aes_string(color = colorby, size = 3)) +
geom_text(aes(label = label),
hjust = 0,
position = position_nudge(x = 0.5)) +
ggtitle(paste0("Phylogeny of "),
subtitle = "Generated by StrainHub") +
scale_fill_brewer(palette="Spectral") +
scale_x_continuous(expand = c(.1, .1))
plotly::ggplotly(t1, tooltip = c("label", "colour"))
annotationdf <- lapply(treepreview$annotations, data.frame, stringsAsFactors = FALSE) %>%
dplyr::bind_rows() %>%
dplyr::select_(colorby) %>%
slice(1:length(treepreview$tip.label)) %>%
as_tibble()
t1 <- ggtree(treepreview, ladderize = T) %<+% annotationdf +
geom_point(aes_string(color = colorby, size = 3)) +
geom_text(aes(label = label),
hjust = 0,
position = position_nudge(x = 0.5)) +
ggtitle(paste0("Phylogeny of "),
subtitle = "Generated by StrainHub") +
scale_fill_brewer(palette="Spectral") +
scale_x_continuous(expand = c(.1, .1))
plotly::ggplotly(t1, tooltip = c("label", "colour"))
annotationdf$tip.label <- treepreview$tip.label
t1 <- ggtree(treepreview, ladderize = T) %<+% annotationdf
t1$data$tip.label
annotationdf <- data.frame(taxa = treepreview$tip.label,
annotationdf$host)
t1 <- ggtree(treepreview, ladderize = T) %<+% annotationdf
annotationdf <- lapply(treepreview$annotations, data.frame, stringsAsFactors = FALSE) %>%
dplyr::bind_rows() %>%
dplyr::select_(colorby) %>%
slice(1:length(treepreview$tip.label)) %>%
as_tibble()
annotationdf <- cbind(taxa = treepreview$tip.label, annotationdf)
ggtree(treepreview, ladderize = T) %<+% annotationdf
ggtree(treepreview, ladderize = T) %<+% annotationdf +
geom_point(aes_string(color = colorby, size = 3)) +
geom_text(aes(label = label)
t1 <- ggtree(treepreview, ladderize = T) %<+% annotationdf +
geom_point(aes_string(color = colorby, size = 3)) +
geom_text(aes(label = label),
hjust = 0,
position = position_nudge(x = 0.5)) +
ggtitle(paste0("Phylogeny of "),
subtitle = "Generated by StrainHub") +
scale_fill_brewer(palette="Spectral") +
scale_x_continuous(expand = c(.1, .1))
plotly::ggplotly(t1, tooltip = c("label", "colour"))
runApp()
rsconnect::setAccountInfo(name='colbyford', token='324E96B5C29C12415746640C89856527', secret='m6yGX8HHBHTHJcqDJcPjqBPRFVsighQiLDwQxTx3')
rsconnect::deployApp()
install.packages(shinyjqui)
install.packages("shinyjqui")
library(shinyjqui)
shiny::runApp()
runApp()
rsconnect::setAccountInfo(name='colbyford', token='324E96B5C29C12415746640C89856527', secret='m6yGX8HHBHTHJcqDJcPjqBPRFVsighQiLDwQxTx3')
rsconnect::deployApp()
shiny::runApp()
install.packages("adegenet")
## Load libraries for BEAST Parser
# library(OutbreakTools)
library(treeio)
library(ggplot2)
library(adegenet)
install.packages("expm")
library(adegenet)
library(ade4)
library(knitr)
library(dplyr)
## Load other libraries
library(shinythemes)
library(readr)
library(ape)
library(castor)
library(visNetwork)
library(hashmap)
library(plyr)
library(network)
library(igraph)
library(data.table)
library(DT)
library(magrittr)
library(htmlwidgets)
library(markdown)
library(rmarkdown)
library(ggtree)
library(plotly)
library(shinyjqui)
install.packages("shinyjqui")
library(shinyjqui)
source("strainhub_functions.R")
runApp()
rsconnect::setAccountInfo(name='colbyford', token='324E96B5C29C12415746640C89856527', secret='m6yGX8HHBHTHJcqDJcPjqBPRFVsighQiLDwQxTx3')
rsconnect::deployApp()
shiny::runApp()
shiny::runApp(launch.browser = interactive())
runApp()
runApp()
rsconnect::deployApp()
rsconnect::deployApp()
shiny::runApp()
rsconnect::deployApp()
rsconnect::deployApp()
runApp()
