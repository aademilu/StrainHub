make_map <- function(filePath, transmissionpath){
  org_dst <- transmissionpath # transmissionpath = probability user filtered table for beast output, org dst table for parsimony ancestry reconstruction 
  latlong <- read.csv(filePath) #User have to input csv table with "Location","Latitude","Longitude" headers.
  lat_long = as_tibble(latlong)
  map_coord = left_join(org_dst, lat_long, by = c("State_org" = "Location")) %>% #Join lat_long and org_dst tables.
    left_join(lat_long, by = c("State_dst" = "Location"), suffix = c("_org", "_dst"))
  mydf <- data.frame(InitialLoc = map_coord$State_org, #Rename and reorganize table to be input ready 
                     InitialLat = map_coord$Latitude_org, 
                     InitialLong = map_coord$Longitude_org,
                     NewLat = map_coord$Latitude_dst,
                     NewLong = map_coord$Longitude_dst,
                     EndLoc = map_coord$State_dst
  )
  p1 <- as.matrix(mydf[,c(3,2)]) # it's important to list lng before lat here
  p2 <- as.matrix(mydf[,c(5,4)]) # and here
  gcIntermediate(p1, p2,  #This enforces the pairs of Origin and Destination for the polylines (otherwise it will enforce all locations to be connected)
                 breakAtDateLine = TRUE,
                 n=100,
                 addStartEnd=TRUE,
                 sp=TRUE) %>% 
    leaflet() %>% 
    addTiles() %>%   # addProviderTiles(providers$CartoDB.Positron) %>% #Alternative to regular tiles
    addCircleMarkers(lng = mydf$InitialLong, lat = mydf$InitialLat, popup= mydf$InitialLoc)%>% #Origin is circle marker, transparency is related to number of transmissions to/from place. 
    addMarkers(lng = mydf$NewLong, lat = mydf$NewLat, popup= mydf$EndLoc)%>% #Events of transmission to place are pinpointed, transparency is related to number of transmissions to/from place.
    addPolylines() #The darker the line the more traffic there is between the nodes.
}