## Load packages for parser

#library(OutbreakTools)
library(treeio)
library(ggplot2)
library(network)
library(ape)
library(adegenet)
library(ade4)
library(knitr)
library(dplyr)

## Load packages from debug StrainHub

library(castor)
library(visNetwork)
library(hashmap)
library(plyr)
library(igraph)
library(data.table)
library(magrittr)

############ NEW/UPDATED SECTION BELOW ###############

## read annotated tree from Nexus file
tree <- read.beast('/Users/schneider/Documents/BEAST_tutorials/Parser/batRABV.mcc.tree')

## extract metadata from annotations 

state = tree@data$state
stateprob = tree@data$state.prob
index = as.numeric(tree@data$node)

## Tree edges - relationship between nodes
tree.edges = tree@phylo$edge

## Rename edges with state (https://csgillespie.github.io/efficientR/dplyr.html / https://r4ds.had.co.nz/ )

tree.edges2 = as_tibble(tree.edges)
state_tib = tibble(
  State = state
) %>% 
  mutate(ind = index)

stateprob_tib = tibble(
  Stateprob = stateprob
) %>% 
  mutate(ind = index)

############ END OF NEW/UPDATED SECTION ###############


## Join node probabilities and names of nodes on dataframe containing edges of the tree

Edge_tib = left_join(tree.edges2, state_tib, by = c("V1" = "ind")) %>% 
  left_join(state_tib, by = c("V2" = "ind"), suffix = c("_org", "_dst")) %>% 
  left_join(stateprob_tib, by =c("V1" = "ind")) %>%
  left_join(stateprob_tib, by =c("V2" = "ind"), suffix = c("_org", "_dst")) %>%
  select(Stateprob_org, State_org, State_dst, Stateprob_dst)

## Filter out pairs of changes between same states and also with probabilities below a certain threshold. For Shiny have to make it user input.

Edge_notdup_threshold = Edge_tib %>% 
  filter(State_org != State_dst) %>%
  filter(Stateprob_org >= 0.9) %>% #Probability of node of origin being on that state
  filter(Stateprob_dst >= 0.9) #Probability of node of destiny being on that state

Edge_filtered = Edge_notdup_threshold %>%
  select(State_org,State_dst)

##Creates structure for network

## This creates a table (in the form of a data frame) of the state changes that occur in the phylogenetic tree;

dat <- data.frame(from = Edge_filtered$State_org, to = Edge_filtered$State_dst)

## counts the frequency of a specific state change occurring

############ NEW/UPDATED SECTION BELOW ###############

#characterlabels <- as.character(unique(state)) ## extract unique labels from state column
#metastates <- characterlabels

edges <- plyr::count(dat)
names(edges)[names(edges) == "freq"] <- "value"
metastates <- unique(combine(as.character(edges$to),as.character(edges$from)))

############ END OF NEW/UPDATED SECTION ###############

nodes <- data.frame(id = 1:length(metastates), label = metastates) ##, fixed = list(x = T, y = T))

nodes = as_tibble(nodes)
edges = as_tibble(edges)


Edges_tib = left_join(edges, nodes, by = c("from" = "label")) %>% 
  left_join(nodes, by = c("to" = "label"), suffix = c("_org", "_dst")) %>% 
 select(id_org, id_dst, value)
names(Edges_tib) <- c("from", "to", "value")

igraph.Object <- graph.data.frame(Edges_tib,directed = T,vertices = nodes)

## Calculates metrics 
indegree <- centr_degree(igraph.Object, mode = c("in")) ## Calculates indegree = Destiny of shifts of metadata state for all nodes
outdegree <- centr_degree(igraph.Object, mode = c("out")) ## Calculates the Outdegree = Source of shifts of metadata state for all nodes
all.degree <- centr_degree(igraph.Object, mode = c("all")) ## Calculates the Degree = Hub, in and out of shifts of metadata state
between.centrality <- betweenness(igraph.Object) ## Calculates Betweenness Centrality
closeness.centrality <- closeness(igraph.Object, mode = c("all")) ## Calculates Closeness Centrality
sourcehubratio <- outdegree$res/all.degree$res ## This is the basic "Source Hub Ratio", still have to work on the normalizing formula

## Generates transmission network
#if (ui == "0")
{
  outdegree <- centr_degree(igraph.Object, mode = c("out")) #Calculates the Outdegree = Source of shifts of metadata state for all nodes
  all.degree <- centr_degree(igraph.Object, mode = c("all")) #Calculates the Degree = Hub, in and out of shifts of metadata state
  sourcehubratio <- outdegree$res/all.degree$res #This is the basic "Source Hub Ratio", still have to work on the normalizing formula
  nodes <- data.frame(nodes, value = sourcehubratio, group = sourcehubratio)
  graph <- visNetwork(nodes = nodes, edges = Edges_tib, main = "Source Hub Ratio: Dead-end ~0 / Hub = .5 / Source = ~1",height = "768px", width = "1024")%>%
    visPhysics(solver = "repulsion")%>%
    visInteraction(navigationButtons = TRUE)%>%
    visOptions(selectedBy = "value", highlightNearest = TRUE, 
               nodesIdSelection = TRUE)%>%
    visEdges(arrows = list(to = list(enabled = T, scaleFactor = 0.75)))
  
  }  
print(graph)